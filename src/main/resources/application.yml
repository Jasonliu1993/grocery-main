#指定当前有效的配置文件
spring:
  profiles:
    active: Dev

#应用名字
  application:
    name: groceryMain

---
#服务注册中心端口号
server:
  port: 8801

spring:
  profiles: Dev
    #服务注册中心实例的主机名
  datasource:
      name: Grocery

      url: jdbc:mysql://127.0.0.1:3306/GROCERY
      username: root
      password: root

      #url: jdbc:mysql://47.100.23.213:3306/GROCERY
      #username: root
      #password: Albert1993!

      #url: jdbc:mysql://52.221.182.191:3306/GROCERY
      #username: root
      #password: Winter1993!

      # 使用druid数据源
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      #--------------------------
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      #spring.datasource.useGlobalDataSourceStat: true

  # REDIS (RedisProperties)
  redis:
      # Redis数据库索引（默认为0）
      database: 0
      # Redis服务器地址
      host: 127.0.0.1
      # Redis服务器连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:
      # 连接超时时间（毫秒）
      #timeout: 2000
      # 连接池最大连接数（使用负值表示没有限制）
      #pool:
          #max-active: 8
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
          #max-wait: -1
      # 连接池中的最大空闲连接
          #max-idle: 8
      # 连接池中的最小空闲连接
          #min-idle: 0

eureka:
  instance:
    hostname: localhost

#服务注册中心的配置内容，指定服务注册中心的位置
  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:8761/eureka/

---
#服务注册中心端口号
server:
  port: 8802

spring:
  profiles: Test
    #服务注册中心实例的主机名
  datasource:
      name: Grocery

      url: jdbc:mysql://127.0.0.1:3306/GROCERY
      username: root
      password: root

      #url: jdbc:mysql://47.100.23.213:3306/GROCERY
      #username: root
      #password: Albert1993!

      #url: jdbc:mysql://52.221.182.191:3306/GROCERY
      #username: root
      #password: Winter1993!

      # 使用druid数据源
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      #--------------------------
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      #spring.datasource.useGlobalDataSourceStat: true

  # REDIS (RedisProperties)
  redis:
      # Redis数据库索引（默认为0）
      database: 0
      # Redis服务器地址
      host: 127.0.0.1
      # Redis服务器连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:
      # 连接超时时间（毫秒）
      #timeout: 2000
      # 连接池最大连接数（使用负值表示没有限制）
      #pool:
          #max-active: 8
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
          #max-wait: -1
      # 连接池中的最大空闲连接
          #max-idle: 8
      # 连接池中的最小空闲连接
          #min-idle: 0

eureka:
  instance:
    hostname: localhost

#服务注册中心的配置内容，指定服务注册中心的位置
  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:8762/eureka/

---
#服务注册中心端口号
server:
  port: 8803

spring:
  profiles: Prd
    #服务注册中心实例的主机名
  datasource:
      name: Grocery

      url: jdbc:mysql://127.0.0.1:3306/GROCERY
      username: root
      password: root

      #url: jdbc:mysql://47.100.23.213:3306/GROCERY
      #username: root
      #password: Albert1993!

      #url: jdbc:mysql://52.221.182.191:3306/GROCERY
      #username: root
      #password: Winter1993!

      # 使用druid数据源
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      #--------------------------
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      #spring.datasource.useGlobalDataSourceStat: true

  # REDIS (RedisProperties)
  redis:
      # Redis数据库索引（默认为0）
      database: 0
      # Redis服务器地址
      host: 127.0.0.1
      # Redis服务器连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:
      # 连接超时时间（毫秒）
      #timeout: 2000
      # 连接池最大连接数（使用负值表示没有限制）
      #pool:
          #max-active: 8
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
          #max-wait: -1
      # 连接池中的最大空闲连接
          #max-idle: 8
      # 连接池中的最小空闲连接
          #min-idle: 0

eureka:
  instance:
    hostname: localhost

#服务注册中心的配置内容，指定服务注册中心的位置
  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:8763/eureka/